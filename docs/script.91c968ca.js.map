{"version":3,"sources":["../node_modules/mustache/mustache.js","js/script.js"],"names":["Mustache","require","log","console","dom","window","overlay","document","getElementById","list","arr","children","node","attributes","atr","value","startsWith","push","openOverlay","name","key","elm","querySelector","classList","add","closeOverlay","event","stopPropagation","remove","e","addEventListener","Kanban","data","init","title","board","cards","columns","prototype","arguments","color","boardnode","generateTemplate","appendChild","newcard","id","newid","getdata","content","column","Object","keys","target","closest","card","setdata","textContent","dectohex","getComputedStyle","newcolumn","chars","str","i","Math","floor","random","length","rgb","search","hex","x","parseInt","toString","slice","match","template","innerHTML","parse","DOMParser","parseFromString","render","body","childNodes","k","kanban","boards","prompt"],"mappings":"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","file":"script.91c968ca.js","sourceRoot":"..\\src","sourcesContent":["/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {  \n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index]) \n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var tokens = cache[cacheKey];\n\n    if (tokens == null)\n      tokens = cache[cacheKey] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `tags` argument is given here it must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  Writer.prototype.render = function render (template, view, partials, tags) {\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template, tags);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value, tags), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '3.0.1';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer. If the optional `tags` argument is given here it must be an\n   * array with two string values: the opening and closing tags used in the\n   * template (e.g. [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  mustache.render = function render (template, view, partials, tags) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, tags);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n","/* eslint no-undef: \"error\" */\n/* eslint-env browser */\n\n'use strict';\n\n// var Sortable = require('sortablejs');\nvar Mustache = require('mustache');\n\nvar log = console.log; // eslint-disable-line no-console\n\nvar dom = [];\nwindow.dom = dom;\n\n// start overlay\n\ndom.overlay = document.getElementById('overlay');\n\ndom.overlay.list = (function () {\n  // get list of all overlays\n  let arr = [];\n  for (let node of document.getElementById('overlay').children) {\n    for (let atr of node.attributes) {\n      if (atr.value.startsWith('o-')) {\n        arr.push(atr.value);\n      }\n    }\n  }\n  return arr;\n})();\n\ndom.overlay.openOverlay = function (name) {\n  // open overlay using class name starting with o-\n  for (let key of dom.overlay.list) {\n    if (key === name) {\n      let elm = dom.overlay.querySelector(`.` + name);\n      if (elm) {\n        dom.overlay.classList.add('show');\n        elm.classList.add('show');\n        return elm;\n      }\n    }\n  }\n};\n\ndom.overlay.closeOverlay = function () {\n  if (event) {\n    event.stopPropagation();\n  } else {\n    return false;\n  }\n  dom.overlay.classList.remove('show');\n  for (var e of dom.overlay.children) {\n    e.classList.remove('show');\n  }\n  return true;\n};\n\nfor (var e of dom.overlay.children) {\n  e.addEventListener('click', event => {\n    event.stopPropagation();\n  });\n}\n\ndom.overlay.addEventListener('click', event => {\n  dom.overlay.closeOverlay();\n});\n\n// end overlay\n\nfunction Kanban (data) {\n  this.init(data);\n  this.title = null;\n  this.board = null;\n  this.cards = {};\n  this.columns = {};\n}\n\nKanban.prototype.init = function (data) {\n  // .boardnode select dom container, .title set title\n  log(arguments, data);\n  data = typeof data === 'object' ? data : {};\n  log(data);\n  this.title = data.title || 'Kanban board';\n  this.color = data.color || '#eee';\n  this.board = data.boardnode || document.children[0].children[1]; // container\n  let node = this.generateTemplate('board-template', this);\n  document.children[0].children[1].appendChild(node);\n  return node;\n};\n\nKanban.prototype.newcard = function (data) {\n  let id = this.newid();\n  let arr = (this.cards[id] = {\n    id: id,\n    title: this.getdata('.o-add-card', 'title') || 'title',\n    color: this.getdata('.o-add-card', 'color'),\n    content: this.getdata('.o-add-card', 'content') || 'meh',\n    column: (data.column || this.columns[Object.keys(this.columns)[0]]).node,\n    node: null\n  });\n  arr.node = this.generateTemplate('card-template', arr);\n  let e = arr.column.children[1].appendChild(arr.node);\n\n  // remove card\n  e.querySelector('.btn-del').addEventListener('click', event => {\n    let node = event.target.closest('[card-id]');\n    delete this.cards[node.attributes['card-id'].value];\n    node.remove();\n  });\n\n  // edit card\n  e.querySelector('.btn-edit').addEventListener('click', event => {\n    let card = event.target.closest('[card-id]');\n    let overlay = dom.overlay.openOverlay('o-edit-card');\n    this.setdata(overlay, 'title', card.querySelector('.card-title').textContent);\n    this.setdata(overlay, 'content', card.querySelector('.card-text').textContent);\n    this.setdata(\n      overlay,\n      'color',\n      this.dectohex(\n        window.getComputedStyle(card.querySelector('.card-nav'))['background-color']\n      )\n    );\n  });\n};\n\nKanban.prototype.newcolumn = function () {\n  // if(dom.overlay.closeOverlay()||1){ //if add was caused by menu\n  let id = this.newid();\n  let arr = (this.columns[id] = {\n    id: id,\n    title: this.getdata('.o-add-column', 'title') || 'null',\n    color: this.getdata('.o-add-column', 'color') || '#000',\n    node: null\n  });\n  arr.node = this.generateTemplate('column-template', arr);\n  let e = this.board.querySelector(`.columns-container`).appendChild(arr.node);\n  // add card\n  e.querySelector('.btn-add').addEventListener('click', event => {\n    let overlay = dom.overlay.openOverlay('o-add-card');\n    log(overlay);\n  });\n\n  return e;\n};\n\nKanban.prototype.newid = function () {\n  var chars = '0123456789abcdefghiklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXTZ';\n  var str = '';\n  for (var i = 0; i < 10; i++) {\n    str += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return str;\n};\n\nKanban.prototype.getdata = function (node, data) {\n  // node target, data-name\n  if (typeof node === 'string') {\n    return dom.overlay.querySelector(`${node} [data=${data}]`).value || null;\n  } else {\n    return node.querySelector(`[data=${data}]`).value || null;\n  }\n};\n\nKanban.prototype.setdata = function (node, name, data) {\n  // node target, data-name, data value\n  return (node.querySelector(`[data=${name}]`).value = data);\n};\n\nKanban.prototype.dectohex = function (rgb) {\n  // rgb(0,0,0) -> #000\n  if (rgb.search('rgb') === -1) return rgb;\n  rgb = rgb.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+))?\\)$/);\n  const hex = x => ('0' + parseInt(x).toString(16)).slice(-2);\n  return '#' + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n};\n\nKanban.prototype.generateTemplate = function (name, data) {\n  // template id , data, node target\n  var template = document.getElementById(name).innerHTML;\n  Mustache.parse(template);\n  return new DOMParser().parseFromString(Mustache.render(template, data), 'text/html')\n    .body.childNodes[0];\n};\n\nwindow.k = Kanban;\nwindow.kanban = new Kanban({ title: 'board name' });\ne = window.kanban.newcolumn();\nwindow.kanban.newcard({ e });\n\nvar boards = [];\nwindow.boards = boards;\ndocument.getElementById('app_newkanban').addEventListener('click', event => {\n  let kanban = new Kanban({ title: prompt('board name') });\n  boards.push(kanban);\n});\nboards.push(window.kanban);\n/*\n\nwindow.kanban.newcard({e})\nwindow.kanban.newcard({e})\n\nSortable.create(c_1, {\n  group: 'foo',\n  animation: 100\n});\n\nSortable.create(c_2, {\n  group: {\n    name: 'bar',\n    pull: true\n  },\n  animation: 100\n});\n\nSortable.create(c_3, {\n  group: {\n    name: 'qux',\n    put: ['foo', 'bar']\n  },\n  animation: 100\n});\n\nvar card = {\n  id: '2kd8s958ka',\n  description: 'Create Kanban app',\n  color: 'green',\n  //element: <Node element>\n};\n\n*/\n"]}