{"version":3,"sources":["../node_modules/mustache/mustache.js","js/script.js"],"names":["Mustache","require","log","console","dom","window","overlay","node","document","getElementById","list","arr","children","attributes","atr","value","startsWith","push","inputs","querySelectorAll","button","querySelector","openOverlay","name","key","elm","classList","add","closeOverlay","event","stopPropagation","remove","e","addEventListener","getdata","data","item","Element","items","obj","setdata","itemdata","reset","index","Kanban","title","container","cards","columns","init","boards","prototype","color","boardnode","generateTemplate","appendChild","column","self","handler","currentTarget","removeEventListener","type","card","newcolumn","newcard","id","newid","content","Object","keys","target","closest","class","chars","str","i","Math","floor","random","length","dectohex","rgb","search","match","hex","x","parseInt","toString","slice","template","innerHTML","parse","DOMParser","parseFromString","render","body","childNodes","prompt","col","elm2","col2"],"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","file":"script.d573be0b.js","sourceRoot":"..\\src","sourcesContent":["/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {  \n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index]) \n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var tokens = cache[cacheKey];\n\n    if (tokens == null)\n      tokens = cache[cacheKey] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `tags` argument is given here it must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  Writer.prototype.render = function render (template, view, partials, tags) {\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template, tags);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value, tags), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '3.0.1';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer. If the optional `tags` argument is given here it must be an\n   * array with two string values: the opening and closing tags used in the\n   * template (e.g. [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  mustache.render = function render (template, view, partials, tags) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, tags);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n","/*eslint no-undef: \"error\"*/\n/*eslint-env browser*/\n\n'use strict';\n\n//var Sortable = require('sortablejs');\nvar Mustache = require('mustache');\n\nvar log = console.log; //eslint-disable-line no-console\n\nvar dom = []; window.dom = dom;\n\n//start overlay\n\tdom.overlay = {}\n\tdom.overlay.node = document.getElementById(\"overlay\")\n\n\tdom.overlay.list = (function(){ //get list of all overlays\n\t\tlet arr = []\n\t\tfor(let node of document.getElementById('overlay').children){\n\t\t\tfor(let atr of node.attributes){\n\t\t\t\tif(atr.value.startsWith('o-')){\n\t\t\t\t\tarr.push(atr.value)\n\t\t\t\t\tarr[atr.value] = node\n\t\t\t\t\tarr[atr.value].inputs = node.querySelectorAll('input,textarea')\n\t\t\t\t\tarr[atr.value].button = node.querySelector('button')\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn arr\n\t})()\n\t\t\n\tdom.overlay.openOverlay = function(name) {//open overlay using class name starting with o-\n\t\tfor(let key of dom.overlay.list){\n\t\t\tif(key===name){\n\t\t\t\tlet elm = dom.overlay.node.querySelector(`.`+name)\n\t\t\t\tif(elm){\n\t\t\t\t\tdom.overlay.node.classList.add('show')\n\t\t\t\t\telm.classList.add('show')\n\t\t\t\t\treturn elm;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tdom.overlay.closeOverlay = function() {\n\t\tif(event){\n\t\t\tevent.stopPropagation()\n\t\t}else{\n\t\t\treturn false\n\t\t}\n\t\tdom.overlay.node.classList.remove(\"show\");\n\t\tfor (var e of dom.overlay.node.children) {\n\t\t\te.classList.remove(\"show\")\n\t\t}\n\t\treturn true\n\t};\n\t\n\tdom.overlay.node.addEventListener('click', (event) => {\n\t\tdom.overlay.closeOverlay()\n\t});\n\t\n\tdom.overlay.getdata = function(data){ //{item: node}\n\t\tlet item = this.list[data.item]\n\t\tif(!(item instanceof Element)) {return}\n\t\tlet items = item.querySelectorAll('input,textarea')\n\t\tlet obj = {}\n\t\tfor (let node of items) {\n\t\t\tobj[node.attributes.data.value] = node.value\n\t\t}\n\t\tlog(item)\n\t\treturn obj\n\t}\t\n\t\n\tdom.overlay.setdata = function(data){\n\t\tlet item = this.list[data.item]\n\t\tif(!(item instanceof Element)) {return}\n\t\tlet items = item.querySelectorAll('input,textarea')\n\t\tfor (let node of items) {\n\t\t\tlet itemdata = node.attributes.data.value\n\t\t\tnode.value = data[itemdata]\n\t\t}\n\t}\n\t\n\tdom.overlay.reset = function(){\n\t\tfor (let index of dom.overlay.list) {\n\t\t\t//console.log(node)\n\t\t\tfor (let node of dom.overlay.list[index].inputs){\n\t\t\t\tnode.value = ''\n\t\t\t}\n\t\t\t//console.log(dom.overlay.list[index].inputs)\n\t\t}\n\t}\n\n\tfor (var e of dom.overlay.node.children) {\n\t\te.addEventListener('click', (event) => {\n\t\t\tevent.stopPropagation()\n\t\t})\n\t}\n\t\n\n//end overlay\n\n\nfunction Kanban(data) {\n\tthis.title = null;\n\tthis.node = null;\n\tthis.container = null;\n\tthis.cards = {};\n\tthis.columns = {};\n\tthis.init(data);\n\t\n\tboards = [];\n};\n\nKanban.prototype.init = function(data){ // .boardnode select dom container, .title set title\n\tdata = typeof(data) === \"object\" ? data : {}\n\tthis.title = data.title||\"Kanban board\"\n\tthis.color = data.color||\"#eee\"\n\tthis.container = data.boardnode||document.children[0].children[1]; //container\n\tthis.node = this.generateTemplate('board-template', this)\n\tlet elm = document.children[0].children[1].appendChild(this.node)\n\t\n\t//event add column\n\telm.querySelector('.btn-create-column').addEventListener('click', (event) => {\n\t\tdom.overlay.openOverlay('o-add-column')\n\t\tlet column = this.node\n\t\tlet self = this\n\t\tdom.overlay.list['o-add-column'].button.addEventListener('click',function handler(event) {\n\t\t\tevent.currentTarget.removeEventListener(event.type, handler);\n\t\t\tlet card = self.newcolumn({column:column})\n\t\t\tdom.overlay.reset()\n\t\t\tdom.overlay.closeOverlay()\n\t\t})\n\t})\n\t\n\t// event remove board\n\telm.querySelector('.btn-del').addEventListener('click', (event) => {\n\t\tthis.node.remove()\n\t})\n\treturn this.node;\n}\n\nKanban.prototype.newcard = function(data) {\n\tlet id = this.newid()\n\tlet arr = this.cards[id] = {\n\t\tid: id,\n\t\ttitle: this.getdata('.o-add-card','title') || 'title',\n\t\tcolor: this.getdata('.o-add-card','color') ,\n\t\tcontent: this.getdata('.o-add-card','content') || 'meh',\n\t\tcolumn: data.column||this.columns[Object.keys(this.columns)[0]].node,\n\t\tnode: null\n\t}\n\tarr.node = this.generateTemplate(\"card-template\",arr)\n\tlet e = arr.column.children[1].appendChild(arr.node)\n\t\n\t// event remove card\n\te.querySelector('.btn-del').addEventListener('click', (event) => {\n\t\tlet node = event.target.closest('[card-id]')\n\t\tdelete this.cards[node.attributes['card-id'].value]\n\t\tnode.remove()\n\t})\n\t\n\t// event edit card\n\te.querySelector('.btn-edit').addEventListener('click', (event) => {\n\t\t//let card = event.target.closest('[card-id]')\n\t\tlet card = arr.node\n\t\tdom.overlay.openOverlay('o-edit-card')\n\t\tdom.overlay.setdata({\n\t\t\ttitle : \"lll\"\n\t\t\t})\n\t\tlog(this.getdata({node:card,class:'card-title'}))\n\t\t//log(dom.overlay.getdata({item:card}))\n\t})\n\t\n}\n\nKanban.prototype.newcolumn = function() {\n\t//if(dom.overlay.closeOverlay()||1){ //if add was caused by menu\n\tlet id = this.newid()\n\tlet arr = this.columns[id] = {\n\t\tid: id,\n\t\ttitle: this.getdata('.o-add-column','title') || 'null',\n\t\tcolor: this.getdata('.o-add-column','color') || '#000',\n\t\tnode: null\n\t}\n\tarr.node = this.generateTemplate(\"column-template\",arr)\n\tlet elm = this.node.querySelector(`.columns-container`).appendChild(arr.node);\n\t\n\t//event add card\n\telm.querySelector('.btn-add').addEventListener('click', (event) => {\n\t\tdom.overlay.openOverlay('o-add-card')\n\t\tlet column = arr.node\n\t\tlet self = this\n\n\t\tdom.overlay.list['o-add-card'].button.addEventListener('click',function handler(event) {\n\t\t\tevent.currentTarget.removeEventListener(event.type, handler);\n\t\t\tlet card = self.newcard({column:column})\n\t\t\tdom.overlay.reset()\n\t\t\tdom.overlay.closeOverlay()\n\t\t})\n\t})\n\n\t//event remove column\n\telm.querySelector('.btn-del').addEventListener('click', (event) => {\n\t\tlog(elm)\n\t\telm.remove()\n\t})\n\t\n\treturn elm\n}\n\nKanban.prototype.newid = function() {\n\tvar chars = '0123456789abcdefghiklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXTZ';\n\tvar str = '';\n\tfor (var i = 0; i < 10; i++) {\n\t\tstr += chars[Math.floor(Math.random() * chars.length)];\n\t}\n\treturn str;\n}\n\nKanban.prototype.getdata = function(node,data) {//node target, data-name\n\tif(typeof node==='string'){\n\t\treturn dom.overlay.node.querySelector(`${node} [data=${data}]`).value || null ;\n\t}else{\n\t\treturn node.querySelector(`[data=${data}]`).value || null ;\n\t}\n}\n\nKanban.prototype.setdata = function(node,name,data) {//node target, data-name, data value\n\treturn node.querySelector(`[data=${name}]`).value = data ;\n}\n\nKanban.prototype.dectohex = function(rgb) {// rgb(0,0,0) -> #000\n\tif (rgb.search(\"rgb\") === -1) return rgb\n\trgb = rgb.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+))?\\)$/)\n\tconst hex = (x) => (\"0\" + parseInt(x).toString(16)).slice(-2)\n\treturn \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n}\n\nKanban.prototype.generateTemplate = function(name, data) { //template id , data, node target\n\tvar template = document.getElementById(name).innerHTML\n\tMustache.parse(template)\n\treturn new DOMParser().parseFromString(Mustache.render(template, data),'text/html').body.childNodes[0]; \n}\n\n\n\n\nvar boards = [];window.boards = boards;\ndocument.getElementById('app_newkanban').addEventListener('click', (event) => {\n\tnew Kanban({title:prompt(\"board name\")});\n\t//let kanban = new Kanban({title:prompt(\"board name\")});\n\t//boards.push(kanban)\n})\n\n{\n\tlet elm = new Kanban({title:\"test board name\"});\n\tlet col = elm.newcolumn()\n\telm.newcard({column:col,title:'lel',content:'123'})\n\telm.newcard({column:col})\n\n\t//boards.push(elm)\n}\n\n{\n\tlet elm2 = new Kanban({title:\"test board name\"});\n\tlet col2 = elm2.newcolumn()\n\telm2.newcard({column:col2})\n\telm2.newcard({column:col2})\n\n\t//boards.push(elm2)\n}\n\n/*\n\nwindow.kanban.newcard({e})\nwindow.kanban.newcard({e})\n\n\n\n\nSortable.create(c_1, {\n  group: 'foo',\n  animation: 100\n});\n\nSortable.create(c_2, {\n  group: {\n    name: 'bar',\n    pull: true\n  },\n  animation: 100\n});\n\nSortable.create(c_3, {\n  group: {\n    name: 'qux',\n    put: ['foo', 'bar']\n  },\n  animation: 100\n});\n\nvar card = {\n  id: '2kd8s958ka',\n  description: 'Create Kanban app',\n  color: 'green',\n  //element: <Node element>\n};\n\n\n*/"]}