/*eslint no-undef: "error"*/
/*eslint-env browser*/

'use strict';

//var Sortable = require('sortablejs');
var Mustache = require('mustache');

var log = console.log; //eslint-disable-line no-console

var dom = []; window.dom = dom;

//start overlay
	dom.overlay = {}
	dom.overlay.node = document.getElementById("overlay")

	dom.overlay.list = (function(){ //get list of all overlays
		let arr = []
		for(let node of document.getElementById('overlay').children){
			for(let atr of node.attributes){
				if(atr.value.startsWith('o-')){
					arr.push(atr.value)
					arr[atr.value] = node
					arr[atr.value].inputs = node.querySelectorAll('input,textarea')
					arr[atr.value].button = node.querySelector('button')
				}
			}
		}
		return arr
	})()
		
	dom.overlay.openOverlay = function(name) {//open overlay using class name starting with o-
		for(let key of dom.overlay.list){
			if(key===name){
				let elm = dom.overlay.node.querySelector(`.`+name)
				if(elm){
					dom.overlay.node.classList.add('show')
					elm.classList.add('show')
					return elm;
				}
			}
		}
	}
	
	dom.overlay.closeOverlay = function() {
		if(event){
			event.stopPropagation()
		}else{
			return false
		}
		dom.overlay.node.classList.remove("show");
		for (var e of dom.overlay.node.children) {
			e.classList.remove("show")
		}
		return true
	};
	
	dom.overlay.node.addEventListener('click', (event) => {
		dom.overlay.closeOverlay()
	});
	
	dom.overlay.getdata = function(data){ //{item: node}
		let item = this.list[data.item]
		if(!(item instanceof Element)) {return}
		let items = item.querySelectorAll('input,textarea')
		let obj = {}
		for (let node of items) {
			obj[node.attributes.data.value] = node.value
		}
		log(item)
		return obj
	}	
	
	dom.overlay.setdata = function(data){
		let item = this.list[data.item]
		if(!(item instanceof Element)) {return}
		let items = item.querySelectorAll('input,textarea')
		for (let node of items) {
			let itemdata = node.attributes.data.value
			node.value = data[itemdata]
		}
	}
	
	dom.overlay.reset = function(){
		for (let index of dom.overlay.list) {
			//console.log(node)
			for (let node of dom.overlay.list[index].inputs){
				node.value = ''
			}
			//console.log(dom.overlay.list[index].inputs)
		}
	}

	for (var e of dom.overlay.node.children) {
		e.addEventListener('click', (event) => {
			event.stopPropagation()
		})
	}
	

//end overlay


function Kanban(data) {
	this.title = null;
	this.node = null;
	this.container = null;
	this.cards = {};
	this.columns = {};
	this.init(data);
	
	boards = [];
};

Kanban.prototype.init = function(data){ // .boardnode select dom container, .title set title
	data = typeof(data) === "object" ? data : {}
	this.title = data.title||"Kanban board"
	this.color = data.color||"#eee"
	this.container = data.boardnode||document.children[0].children[1]; //container
	this.node = this.generateTemplate('board-template', this)
	let elm = document.children[0].children[1].appendChild(this.node)
	
	//event add column
	elm.querySelector('.btn-create-column').addEventListener('click', (event) => {
		dom.overlay.openOverlay('o-add-column')
		let column = this.node
		let self = this
		dom.overlay.list['o-add-column'].button.addEventListener('click',function handler(event) {
			event.currentTarget.removeEventListener(event.type, handler);
			let card = self.newcolumn({column:column})
			dom.overlay.reset()
			dom.overlay.closeOverlay()
		})
	})
	
	// event remove board
	elm.querySelector('.btn-del').addEventListener('click', (event) => {
		this.node.remove()
	})
	return this.node;
}

Kanban.prototype.newcard = function(data) {
	let id = this.newid()
	let arr = this.cards[id] = {
		id: id,
		title: this.getdata('.o-add-card','title') || 'title',
		color: this.getdata('.o-add-card','color') ,
		content: this.getdata('.o-add-card','content') || 'meh',
		column: data.column||this.columns[Object.keys(this.columns)[0]].node,
		node: null
	}
	arr.node = this.generateTemplate("card-template",arr)
	let e = arr.column.children[1].appendChild(arr.node)
	
	// event remove card
	e.querySelector('.btn-del').addEventListener('click', (event) => {
		let node = event.target.closest('[card-id]')
		delete this.cards[node.attributes['card-id'].value]
		node.remove()
	})
	
	// event edit card
	e.querySelector('.btn-edit').addEventListener('click', (event) => {
		//let card = event.target.closest('[card-id]')
		let card = arr.node
		dom.overlay.openOverlay('o-edit-card')
		dom.overlay.setdata({
			title : "lll"
			})
		log(this.getdata({node:card,class:'card-title'}))
		//log(dom.overlay.getdata({item:card}))
	})
	
}

Kanban.prototype.newcolumn = function() {
	//if(dom.overlay.closeOverlay()||1){ //if add was caused by menu
	let id = this.newid()
	let arr = this.columns[id] = {
		id: id,
		title: this.getdata('.o-add-column','title') || 'null',
		color: this.getdata('.o-add-column','color') || '#000',
		node: null
	}
	arr.node = this.generateTemplate("column-template",arr)
	let elm = this.node.querySelector(`.columns-container`).appendChild(arr.node);
	
	//event add card
	elm.querySelector('.btn-add').addEventListener('click', (event) => {
		dom.overlay.openOverlay('o-add-card')
		let column = arr.node
		let self = this

		dom.overlay.list['o-add-card'].button.addEventListener('click',function handler(event) {
			event.currentTarget.removeEventListener(event.type, handler);
			let card = self.newcard({column:column})
			dom.overlay.reset()
			dom.overlay.closeOverlay()
		})
	})

	//event remove column
	elm.querySelector('.btn-del').addEventListener('click', (event) => {
		log(elm)
		elm.remove()
	})
	
	return elm
}

Kanban.prototype.newid = function() {
	var chars = '0123456789abcdefghiklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXTZ';
	var str = '';
	for (var i = 0; i < 10; i++) {
		str += chars[Math.floor(Math.random() * chars.length)];
	}
	return str;
}

Kanban.prototype.getdata = function(node,data) {//node target, data-name
	if(typeof node==='string'){
		return dom.overlay.node.querySelector(`${node} [data=${data}]`).value || null ;
	}else{
		return node.querySelector(`[data=${data}]`).value || null ;
	}
}

Kanban.prototype.setdata = function(node,name,data) {//node target, data-name, data value
	return node.querySelector(`[data=${name}]`).value = data ;
}

Kanban.prototype.dectohex = function(rgb) {// rgb(0,0,0) -> #000
	if (rgb.search("rgb") === -1) return rgb
	rgb = rgb.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))?\)$/)
	const hex = (x) => ("0" + parseInt(x).toString(16)).slice(-2)
	return "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
}

Kanban.prototype.generateTemplate = function(name, data) { //template id , data, node target
	var template = document.getElementById(name).innerHTML
	Mustache.parse(template)
	return new DOMParser().parseFromString(Mustache.render(template, data),'text/html').body.childNodes[0]; 
}




var boards = [];window.boards = boards;
document.getElementById('app_newkanban').addEventListener('click', (event) => {
	new Kanban({title:prompt("board name")});
	//let kanban = new Kanban({title:prompt("board name")});
	//boards.push(kanban)
})

{
	let elm = new Kanban({title:"test board name"});
	let col = elm.newcolumn()
	elm.newcard({column:col,title:'lel',content:'123'})
	elm.newcard({column:col})

	//boards.push(elm)
}

{
	let elm2 = new Kanban({title:"test board name"});
	let col2 = elm2.newcolumn()
	elm2.newcard({column:col2})
	elm2.newcard({column:col2})

	//boards.push(elm2)
}

/*

window.kanban.newcard({e})
window.kanban.newcard({e})




Sortable.create(c_1, {
  group: 'foo',
  animation: 100
});

Sortable.create(c_2, {
  group: {
    name: 'bar',
    pull: true
  },
  animation: 100
});

Sortable.create(c_3, {
  group: {
    name: 'qux',
    put: ['foo', 'bar']
  },
  animation: 100
});

var card = {
  id: '2kd8s958ka',
  description: 'Create Kanban app',
  color: 'green',
  //element: <Node element>
};


*/